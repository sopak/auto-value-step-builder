buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}
plugins {
    id "net.ltgt.apt" version "0.12"
}
apply plugin: 'org.junit.platform.gradle.plugin'

allprojects {

    repositories {
        mavenCentral()
    }

    apply plugin: 'idea'
    apply plugin: 'org.junit.platform.gradle.plugin'

    dependencies{
        testCompile(
                'org.junit.jupiter:junit-jupiter-api:5.0.1'
        )
        testRuntime(
                'org.junit.jupiter:junit-jupiter-engine:5.0.1'
        )
    }

    idea.module {

        inheritOutputDirs = false

        sourceDirs += file('build/generated/source/apt/main')

        outputDir file('build/classes/main')
        testOutputDir file('build/classes/test')

    }

    ext {

        vars = {
            sourceCompatibility = JavaVersion.VERSION_1_8
        }

        libs = [
                commonsIo           : 'commons-io:commons-io:2.5',
                guava               : 'com.google.guava:guava:23.0',
                junit5              : 'org.junit.jupiter:junit-jupiter-api:5.0.1',
                junit5Params        : 'org.junit.jupiter:junit-jupiter-params:5.0.1',
                moshi               : 'com.squareup.moshi:moshi:1.5.0',
                moshiAdapters       : 'com.squareup.moshi:moshi-adapters:1.5.0',
                autoValueMoshi      : 'com.ryanharter.auto.value:auto-value-moshi:0.4.4',
                kotlin              : 'org.jetbrains.kotlin:kotlin-stdlib-jre8:1.1.51',
                kotlinPlugin        : 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.1.51',

                googleCompileTesting: 'com.google.testing.compile:compile-testing:0.11',

                velocity            : 'org.apache.velocity:velocity:1.7',
                velocityTools       : 'org.apache.velocity:velocity-tools:2.0',
                autoValue           : 'com.google.auto.value:auto-value:1.5',
                autoCommon          : 'com.google.auto:auto-common:0.8',
                autoService         : 'com.google.auto.service:auto-service:1.0-rc3',
                jsr305              : 'com.google.code.findbugs:jsr305:1.3.9',

                // To avoid compiler warnings about @API annotations in JUnit code.
                apiGuardian         : 'org.apiguardian:apiguardian-api:1.0.0'
        ]
    }

}

idea.project {
    ipr {
        beforeMerged { project ->
            project.modulePaths.clear()
        }
        withXml { provider ->
            // Get XML as groovy.util.Node to work with.
            def projectXml = provider.asNode()
            // Find compiler configuration component.
            def compilerConfiguration = projectXml.component.find { component ->
                component.'@name' == 'CompilerConfiguration'
            }
            // Replace current annotationProcessing
            // that is part of the compiler configuration.
            def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
            currentAnnotationProcessing.replaceNode {
                annotationProcessing {
                    profile(name: 'Default', default: true, enabled: true) {
                        processorPath(useClasspath: true)
                        sourceOutputDir(name: '../../generated/source/apt/main')
                    }
                }
            }
        }
    }
}

task setup {
    dependsOn ideaModule, ideaProject
    doLast {
        copy {
            from '.'
            into '.idea/'
            include '*.ipr'
            rename { "modules.xml" }
        }
        project.delete "${project.name}.ipr"
//	    project.delete "${project.name}.iml"
//      project.delete "${project.name}.iws"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}